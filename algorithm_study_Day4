{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "알고리즘 Day4",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNjiWlkWa/xIR8R3Ef/vwI+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/imyoungchae/YoungChaeSon/blob/main/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_Day4.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "- 자료구조의 효율성은 자료구조에 대해 수행되는 연산의 수행시간으로 측정\n",
        "\n",
        "- 알고리즘의 성능: 수행시간을 낱타내는 시간복자도와 알고리즘이 수행되는 동안 사용되는 메모리 공간의 크기를 나타내는 공간복잡도에 기반하여 분석\n",
        "\n",
        "- 시간복잡도는 알고리즘이 실행되는 동안에 사용된 기본적인 연산횟수를 입력크기의 함수로 나타낸다\n",
        "\n",
        "- O(Big-Oh) 표기법 알아두기"
      ],
      "metadata": {
        "id": "3AzX6B7SU8Ti"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **연속한 숫자의 합을 구하는** **알고리즘**"
      ],
      "metadata": {
        "id": "FKWzU-m4YwqH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "-O(n): n이 늘어남에 따라 계산도 늘어남"
      ],
      "metadata": {
        "id": "9SXGR9eTaMsn"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1kTeM-PgU5X8",
        "outputId": "89793aaa-d9f1-4d28-c10a-950574d61b87"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "55\n",
            "5050\n"
          ]
        }
      ],
      "source": [
        "def sum_sq(n):\n",
        "  s=0\n",
        "  for i in range(1,n+1):\n",
        "    s=s+i\n",
        "  return s\n",
        "\n",
        "print(sum_sq(10))\n",
        "print(sum_sq(100))"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-O(1): n이 늘어나도 계산은 그대로임"
      ],
      "metadata": {
        "id": "i4M8x7JPaRfP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def sum_sq2(n):\n",
        "  return n*(n+1)//2\n",
        "\n",
        "print(sum_sq2(10))\n",
        "print(sum_sq2(100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yc-x_LryZZBI",
        "outputId": "a0c3c989-10a8-457b-8ec7-6947c2533337"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "55\n",
            "5050\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 최솟값 구하기 알고리즘"
      ],
      "metadata": {
        "id": "iA1mxhrfbHyu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "-O(n)"
      ],
      "metadata": {
        "id": "wN4jE75Vcjhe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_min(a):\n",
        "  n=len(a)\n",
        "  min_v=a[0]\n",
        "  for i in range(1,n):\n",
        "    if a[i]<min_v:\n",
        "      min_v=a[i]\n",
        "  return min_v\n",
        "  \n",
        "v=[17,92,18,33,58,7,33,42]\n",
        "print(find_min(v))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H6yroTy5a8M_",
        "outputId": "090a070c-ffb6-406d-95dd-8e560b379bc5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 두번 이상 나온 같은 이름 찾기 알고리즘"
      ],
      "metadata": {
        "id": "s13bVjv-gyJ9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "입력: n명의 이름이 들어있는 리스트\\\n",
        "출력: 두번 이상 나온 같은 이름"
      ],
      "metadata": {
        "id": "iuKXmNoriF_-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def print_pairs(a):\n",
        "  n=len(a)\n",
        "  result=set()\n",
        "\n",
        "  for i in range(0,n-1):\n",
        "   for j in range(i+1,n):\n",
        "      if a[i]==a[j]:\n",
        "        result.add(a[i])\n",
        "\n",
        "  return result \n",
        "\n",
        "\n",
        "name=['Tom','Jerry','Mike','Tom','Mike']\n",
        "print(print_pairs(name))\n",
        "print()\n",
        "name_2=['Tom','Jerry','Mike','Tom','Jerry']\n",
        "print(print_pairs(name_2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aMaIpHD_cUZo",
        "outputId": "a3501f04-9bc4-40e1-c7cf-98bd34b72a09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Mike', 'Tom'}\n",
            "\n",
            "{'Tom', 'Jerry'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 연속한 숫자의 곱을 구하는 알고리즘"
      ],
      "metadata": {
        "id": "oRab1wpdlB8E"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "입력: n\\\n",
        "출력: 1부터 n까지 연속한 숫자를 곱한 값"
      ],
      "metadata": {
        "id": "wXBy11cClFRV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def fact(n):\n",
        "  if n<=1:\n",
        "    return 1\n",
        "  return n*fact(n-1) #재귀\n",
        "\n",
        "print(fact(1))\n",
        "print(fact(5))\n",
        "print(fact(10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lMfVexDjlLZF",
        "outputId": "7d3fa8cf-e25a-4ef3-bcf2-4e77bcbb343f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "120\n",
            "3628800\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 최대공약수 구하는 알고리즘"
      ],
      "metadata": {
        "id": "qou5_4xrn20c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "입력: a,b\\\n",
        "출력: a와 b의 최대공약수"
      ],
      "metadata": {
        "id": "7PgneCBCn-CM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def gcd(a,b):\n",
        "  i=min(a,b)#두 수 중에서 최솟값을 구하는 파이썬 함수\n",
        "  while True:\n",
        "    if a%i==0 and b%i==0:\n",
        "      return i\n",
        "    i=i-1\n",
        "\n",
        "print('최대공약수: ',gcd(1,5))\n",
        "print('최대공약수: ',gcd(10,50))\n",
        "print('최대공약수: ',gcd(20,40))\n",
        "print('최대공약수: ',gcd(24,60))\n",
        "print('최대공약수: ',gcd(81,27))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p6oOfioyn6i9",
        "outputId": "b11d3dfc-ae93-4577-8404-9176530a8a6e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "최대공약수:  1\n",
            "최대공약수:  10\n",
            "최대공약수:  20\n",
            "최대공약수:  12\n",
            "최대공약수:  27\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-유클리드 알고리즘 (훨씬 간결함)"
      ],
      "metadata": {
        "id": "7bXC0VwQpfyz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def gcd(a,b):\n",
        "  if b==0:#종료조건\n",
        "    return a\n",
        "  return gcd(b,a%b)\n",
        "\n",
        "print('최대공약수: ',gcd(1,5))\n",
        "print('최대공약수: ',gcd(10,50))\n",
        "print('최대공약수: ',gcd(20,40))\n",
        "print('최대공약수: ',gcd(24,60))\n",
        "print('최대공약수: ',gcd(81,27))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G_UVI_M9pPhd",
        "outputId": "18990a4e-1268-4052-cd09-cf373fe69157"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "최대공약수:  1\n",
            "최대공약수:  10\n",
            "최대공약수:  20\n",
            "최대공약수:  12\n",
            "최대공약수:  27\n"
          ]
        }
      ]
    }
  ]
}
