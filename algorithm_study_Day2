{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "알고리즘 Day2",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNl6SqRADZi37ziqAELIBJj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/imyoungchae/YoungChaeSon/blob/main/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98_Day2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#pop과 append"
      ],
      "metadata": {
        "id": "of7uXKL3TKOZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RwpspRp8TFgm"
      },
      "outputs": [],
      "source": [
        "score=[88,89,98,97,85,33,22,45,66,55]\n",
        "print(score.pop()) #55: 제일 뒤에 있는 값\n",
        "\n",
        "x=score.pop()\n",
        "print(x)#55앞의 값: 66\n",
        "\n",
        "print(score)#55와 66이 튀어나오고 남은 값들\n",
        "print(score.pop(-1))#(-1)은 ()과 같음 즉, 가장 마지막 값이 튀어나옴 즉 45\n",
        "print(score.pop(-1))#45앞의 값 22\n",
        "score.append(77) #77을 추가하세여\n",
        "print(score)#77이 끝에 들어가도록 출력이 된다\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# list내의 값 찾기"
      ],
      "metadata": {
        "id": "dR7Liu40TOnR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "score=[88,89,98,97,85,33,100,22,45,66,55]\n",
        "perfect=score.index(100)\n",
        "print(\"만점받은 학생은 \"+str(perfect)+\"번입니다.\")\n",
        "pernum=score.count(100)\n",
        "print(\"만점자 수는 \"+str(pernum)+\"명입니다.\")\n"
      ],
      "metadata": {
        "id": "KaCoqjHJTICx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#len, max, min"
      ],
      "metadata": {
        "id": "gk6IAzkaTRnR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "score=[88,89,98,97,85,33,100,22,45,66,55]\n",
        "print(\"학생 수는 %d명입니다.\"%len(score))\n",
        "print(\"최고 점수는 %d입니다.\"%max(score))\n",
        "print(\"최저 점수는 %d입니다.\"%min(score))\n"
      ],
      "metadata": {
        "id": "Kj9NTr8CTZfC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "*함수와 메서드의 차이\n",
        "\n",
        "- 함수: 함수 이름을 통해 함수를 사용할 수 있다\\\n",
        "ex) print(),type(),int()\\\n",
        "함수의 값을 변수에 대입 가능\n",
        "\n",
        "- 메소드: 객체와 연관되어 사용된다\\\n",
        "사용하고자하는 대상이 .으로 연결되어 있어야 함\\\n",
        "ex) .append(), .slpit() 등\n",
        "\n",
        "- 매소드는 클래스 내에서 정의되므로 해당 클래스에 종속되며 함수가 매소드보다\\\n",
        "더 포괄적인 의미를 가진다\n"
      ],
      "metadata": {
        "id": "7ruqVrSsTZNi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ans=input('결제 하시겠습니까?')\n",
        "if ans in['yes','y','ok','예','당근']:\n",
        "    print('구입해주셔서 감사합니다')\n",
        "else:\n",
        "    print('안녕히가세요')\n"
      ],
      "metadata": {
        "id": "wgGn4no-TeGC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Sort"
      ],
      "metadata": {
        "id": "XlZWSGjiU30J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "score=[88,95,70,100,99]\n",
        "\n",
        "score.sort()\n",
        "print(score)\n",
        "\n",
        "score.reverse()\n",
        "print(score)\n",
        "#sort의 단점: 원래 list의 순서가 바뀌어버림 \n"
      ],
      "metadata": {
        "id": "b7KdMsd3U4F5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "country=[\"Korea\",'japan','China','america']\n",
        "country.sort()#대문자, 소문자 구분하여 알파벳순으로 배열\n",
        "print(country)\n",
        "country.sort()#대문자소문자 구분없이 정렬하는 법\n",
        "country.sort(key=str.lower)#대문자, 소문자 구분하지 않고 알파벳순으로 배열\n",
        "print(country)\n"
      ],
      "metadata": {
        "id": "gNyazCORVDy6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#sort의 대안 sorted : 아예 새로은 list를 만듬(sorted: 메소드 아니고 함수)"
      ],
      "metadata": {
        "id": "cFMBXIF6U8HR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "score=[88,95,70,100,99]\n",
        "score2=sorted(score)\n",
        "print(score2)#정렬되어 70 88 95 99 100\n",
        "print(score)#그대로 88 95 70 100 99"
      ],
      "metadata": {
        "id": "0YcBRdJXVBw5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#onetuple"
      ],
      "metadata": {
        "id": "PpJkZhKLVHrZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tu=2,#튜플임\n",
        "value=2#튜플아님\n",
        "value1=(2)#튜플아님\n",
        "value2=(2,)#튜플임\n",
        "value3=2,3#튜플임\n",
        "print(tu)#출력하면 괄호를 열어 튜플임을 표시해준다.\n",
        "print(value)"
      ],
      "metadata": {
        "id": "E43Ew4KGVHVh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#unpacking"
      ],
      "metadata": {
        "id": "F6XG_2BEVOLZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tu='이순신','김유신','강감찬'\n",
        "lee,kim,kang=tu\n",
        "print('lee')\n",
        "print('kim')\n",
        "print('kang')"
      ],
      "metadata": {
        "id": "dsQSpq6jVKmJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#swap"
      ],
      "metadata": {
        "id": "2C7Tg5ZZVQeq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "a,b,c=12,34,29\n",
        "print(a,b,c)\n",
        "a,b,c=b,a,c\n",
        "print(a,b,c)#파이썬은 별도의 temp없이 둘이 바로 교환 가능"
      ],
      "metadata": {
        "id": "sg6gLg0hVQ6h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Tuple 바꾸기(list를 사용하여 가능)\n"
      ],
      "metadata": {
        "id": "jKHlXyFgVVAZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "score=[88,95,70,100,99]\n",
        "tu=tuple(score)\n",
        "print(tu)\n",
        "li=list(tu)\n",
        "li[0]=100\n",
        "print(li)"
      ],
      "metadata": {
        "id": "0vsh28MHVYv5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 딕셔너리"
      ],
      "metadata": {
        "id": "6Sw66t88Vg2y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dic={'boy':'소년','school':'학교','book':'책'}\n",
        "print(dic)\n",
        "print(dic['boy'])\n",
        "print(dic['school'])\n",
        "print(dic.get('student'))#방법1.없는 단어를 None 이라고 출려되게 설정하기\n",
        "print(dic.get('student','사전에 없는 단어입니다.'))#방법2.없는 단어를 원하늠 문장이 출력되게 설정하기\n",
        "if 'student' in dic:#방법3. 없는 단어를 if문에 따라 출력되게 하기\n",
        "    print('사전에 있는 단어입니다')\n",
        "else:\n",
        "    print('이 단어는 사전에 없습니다')\n"
      ],
      "metadata": {
        "id": "utq5iCDxVd8Z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "-딕셔너리 값 바꾸기"
      ],
      "metadata": {
        "id": "yU-N2QfCVmPB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dic={'boy':'소년','school':'학교','book':'책'}\n",
        "dic['boy']='남자애'\n",
        "dic['girl']='소녀'\n",
        "del dic['book']\n",
        "print(dic)\n",
        "print(dic.keys())\n",
        "print(dic.values())\n",
        "print(dic.items())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e8T_i0q3Vj75",
        "outputId": "d650ac37-e2d7-4116-a867-edf3e8bfdf7e"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'boy': '남자애', 'school': '학교', 'girl': '소녀'}\n",
            "dict_keys(['boy', 'school', 'girl'])\n",
            "dict_values(['남자애', '학교', '소녀'])\n",
            "dict_items([('boy', '남자애'), ('school', '학교'), ('girl', '소녀')])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-딕셔너리 값 합치기 dicupdate"
      ],
      "metadata": {
        "id": "oMg_JfGiVqiy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dic={'boy':'소년','school':'학교','book':'책'}\n",
        "dic2={'student':'학생','teacher':'선생님','book':'서적'}\n",
        "dic.update(dic2)\n",
        "print(dic)\n"
      ],
      "metadata": {
        "id": "1-hI341uVo-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "-list to dic"
      ],
      "metadata": {
        "id": "MQH1_0joVsey"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "li=[['boy','소년'],['school','학교'],['book','책']]\n",
        "dic=dict(li)\n",
        "print(dic)\n",
        "li1=list(dic)\n",
        "print(li1)"
      ],
      "metadata": {
        "id": "TL37etsyVssJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
